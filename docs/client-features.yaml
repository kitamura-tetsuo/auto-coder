---
# Auto-Coder Client Features Documentation
# This file documents all features implemented in the Auto-Coder application

application:
  name: "Auto-Coder"
  version: "0.1.0"
  description: "Automated application development using AI CLI backends (codex default, switchable to gemini via --backend) and GitHub integration"

features:
  github_integration:
    name: "GitHub API Integration"
    description: "Integration with GitHub API to fetch and manage issues and pull requests"
    components:
      - name: "GitHubClient"
        file: "src/auto_coder/github_client.py"
        methods:
          - name: "get_repository"
            description: "Retrieve repository object by name"
            parameters: ["repo_name"]
            returns: "Repository object"
          - name: "get_open_issues"
            description: "Fetch open issues from repository, sorted by creation date (oldest first)"
            parameters: ["repo_name", "limit"]
            returns: "List of Issue objects"
          - name: "get_open_pull_requests"
            description: "Fetch open pull requests from repository, sorted by creation date (oldest first)"
            parameters: ["repo_name", "limit"]
            returns: "List of PullRequest objects"
          - name: "get_issue_details"
            description: "Extract detailed information from an issue"
            parameters: ["issue"]
            returns: "Dictionary with issue details"
          - name: "get_pr_details"
            description: "Extract detailed information from a pull request"
            parameters: ["pr"]
            returns: "Dictionary with PR details"
          - name: "get_pr_details_by_number"
            description: "Get PR details by repository name and PR number"
            parameters: ["repo_name", "pr_number"]
            returns: "Dictionary with PR details"
          - name: "create_issue"
            description: "Create a new issue in the repository"
            parameters: ["repo_name", "title", "body", "labels"]
            returns: "Issue object"
          - name: "add_comment_to_issue"
            description: "Add a comment to an existing issue"
            parameters: ["repo_name", "issue_number", "comment"]
            returns: "None"
          - name: "close_issue"
            description: "Close an issue with optional comment"
            parameters: ["repo_name", "issue_number", "comment"]
            returns: "None"
          - name: "add_labels_to_issue"
            description: "Add labels to an existing issue (avoids duplicates)"
            parameters: ["repo_name", "issue_number", "labels"]
            returns: "None"

  gemini_integration:
    name: "Gemini AI Integration"
    description: "Integration with Gemini AI for single-run direct actions (no analysis-only calls)"
    components:
      - name: "GeminiClient"
        file: "src/auto_coder/gemini_client.py"
        methods:
          - name: "suggest_features"
            description: "Suggest new features based on repository analysis"
            parameters: ["repo_context"]
            returns: "List of feature suggestions"
          - name: "switch_to_conflict_model"
            description: "Switch to faster model (gemini-2.5-flash) for conflict resolution"
            parameters: []
            returns: "None"
          - name: "switch_to_default_model"
            description: "Switch back to default model"
            parameters: []
            returns: "None"
          - name: "_escape_prompt"
            description: "Escape @ characters in prompts for safe Gemini CLI usage"
            parameters: ["prompt"]
            returns: "String with escaped @ characters"

  automation_engine:
    name: "Automation Engine"
    description: "Main orchestration engine that coordinates GitHub and Gemini integration"
    components:
      - name: "AutomationEngine"
        file: "src/auto_coder/automation_engine.py"
        methods:
          - name: "run"
            description: "Execute the main automation process for a repository"
            parameters: ["repo_name", "jules_mode (optional)"]
            returns: "Dictionary with automation results"
          - name: "create_feature_issues"
            description: "Analyze repository and create feature enhancement issues"
            parameters: ["repo_name"]
            returns: "List of created issues"
          - name: "_process_issues"
            description: "Process open issues in the repository"
            parameters: ["repo_name"]
            returns: "List of processed issues"
          - name: "_process_issues_jules_mode"
            description: "Process open issues in jules mode - only add 'jules' label"
            parameters: ["repo_name"]
            returns: "List of processed issues"
          - name: "_process_pull_requests"
            description: "Process open pull requests in the repository with two-loop priority order"
            parameters: ["repo_name"]
            returns: "List of processed PRs"
            details: "First loop merges PRs with passing Actions AND mergeable status, second loop fixes remaining PRs"
          - name: "_take_issue_actions"
            description: "Take automated actions based on issue analysis"
            parameters: ["repo_name", "issue_data", "analysis", "solution"]
            returns: "List of actions taken"
          - name: "_take_pr_actions"
            description: "Take automated actions based on PR analysis"
            parameters: ["repo_name", "pr_data", "analysis"]
            returns: "List of actions taken"
          - name: "_process_pr_for_merge"
            description: "Process a PR for quick merging when GitHub Actions are passing"
            parameters: ["repo_name", "pr_data"]
            returns: "Dictionary with PR processing results"
          - name: "_process_pr_for_fixes"
            description: "Process a PR for issue resolution when GitHub Actions are failing or pending"
            parameters: ["repo_name", "pr_data"]
            returns: "Dictionary with PR processing results"
          - name: "_is_package_lock_only_conflict"
            description: "Check if merge conflicts are only in package-lock.json or similar dependency files"
            parameters: ["conflict_info"]
            returns: "Boolean indicating if conflicts are dependency-file only"
          - name: "_resolve_package_lock_conflicts"
            description: "Resolve package-lock.json conflicts by deleting and regenerating dependency files"
            parameters: ["pr_data", "conflict_info"]
            returns: "List of actions taken during resolution"
          - name: "_get_github_actions_logs"
            description: "Use gh api to fetch failed job logs (ZIP) for the latest failed run on the PR branch and extract error snippets"
            parameters: ["repo_name", "pr_data", "failed_checks"]
            returns: "String containing extracted error snippets per failed job"


  cli_interface:
    name: "Command Line Interface"
    description: "CLI for interacting with Auto-Coder functionality"
    components:
      - name: "CLI Commands"
        file: "src/auto_coder/cli.py"
        commands:
          - name: "process-issues"
            description: "Process GitHub issues and PRs using AI CLI (codex or gemini)"
            options:
              - "--repo": "GitHub repository (owner/repo)"
              - "--github-token": "GitHub API token"
              - "--backend": "AI backend to use (codex|gemini). Default: codex"
              - "--model": "Model to use (Gemini only; ignored when backend=codex; default: gemini-2.5-pro)"
              - "--dry-run": "Run in dry-run mode without making changes"
              - "--jules-mode": "Run in jules mode - only add 'jules' label to issues (PRs still use AI analysis)"
              - "--log-level": "Set logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)"
              - "--log-file": "Log file path (optional)"
          - name: "create-feature-issues"
            description: "Analyze repository and create feature enhancement issues"
            options:
              - "--repo": "GitHub repository (owner/repo)"
              - "--github-token": "GitHub API token"
              - "--backend": "AI backend to use (codex|gemini). Default: codex"
              - "--model": "Model to use (Gemini only; ignored when backend=codex; default: gemini-2.5-pro)"
              - "--gemini-api-key": "Gemini API key (optional, used when backend=gemini)"

  configuration:
    name: "Configuration Management"
    description: "Application configuration and settings management"
    components:
      - name: "Settings"
        file: "src/auto_coder/config.py"
        settings:
          - name: "github_token"
            description: "GitHub API token"
            env_var: "GITHUB_TOKEN"
            default: null
          - name: "github_api_url"
            description: "GitHub API URL"
            env_var: "GITHUB_API_URL"
            default: "https://api.github.com"
          - name: "gemini_api_key"
            description: "Gemini API key"
            env_var: "GEMINI_API_KEY"
            default: null
          - name: "gemini_model"
            description: "Gemini model to use"
            env_var: "GEMINI_MODEL"
            default: "gemini-pro"
          - name: "max_issues_per_run"
            description: "Maximum issues to process per run"
            env_var: "MAX_ISSUES_PER_RUN"
            default: 10
          - name: "max_prs_per_run"
            description: "Maximum PRs to process per run"
            env_var: "MAX_PRS_PER_RUN"
            default: 5
          - name: "dry_run"
            description: "Enable dry-run mode"
            env_var: "DRY_RUN"
            default: false

workflows:
  issue_processing:
    name: "Issue Processing Workflow"
    description: "Automated workflow for processing GitHub issues (single-run, no analysis phase)"
    steps:
      1. "Fetch open issues from repository (oldest first)"
      2. "Take direct actions via AI CLI in a single run (analysis+implementation combined)"
      3. "Add comments or close issues as appropriate"
      4. "Generate automation report"

  pr_processing:
    name: "Pull Request Processing Workflow"
    description: "Automated workflow for processing GitHub pull requests with two-loop priority order"
    steps:
      1. "Fetch open pull requests from repository (oldest first)"
      2. "First loop: Check GitHub Actions status AND mergeable status, merge qualifying PRs"
      3. "Second loop: Process remaining PRs for issue resolution"
      4. "Generate automation report"

  feature_suggestion:
    name: "Feature Suggestion Workflow"
    description: "Automated workflow for suggesting and creating feature issues"
    steps:
      1. "Analyze repository context"
      2. "Generate feature suggestions using Gemini AI"
      3. "Create feature issues in repository"
      4. "Generate feature suggestions report"

  jules_mode:
    name: "Jules Mode Workflow"
    description: "Jules mode - simple label addition for issues; PRs processed without analysis-only phase"
    steps:
      1. "Fetch open issues from repository (oldest first)"
      2. "Check if 'jules' label already exists on each issue"
      3. "Add 'jules' label to issues that don't have it"
      4. "Process PRs with single-run direct actions (no analysis-only phase)"
      5. "Generate automation report"

special_features:
  prompt_escaping:
    name: "Gemini Prompt @ Character Escaping"
    description: "Automatically escapes @ characters in prompts to prevent Gemini CLI parsing issues"
    behavior:
      - "Detects @ characters in prompts before sending to Gemini CLI"
      - "Replaces @ with \\@ to prevent CLI argument parsing conflicts"
      - "Ensures safe transmission of user mentions and email addresses in prompts"
    benefits:
      - "Prevents CLI parsing errors with @ characters"
      - "Allows safe inclusion of user mentions and email addresses"
      - "Maintains prompt integrity during Gemini CLI communication"
    implementation:
      - "Applied automatically in _run_gemini_cli method"
      - "Uses simple string replacement: @ → \\@"
      - "No user intervention required"

  enhanced_pr_merge_criteria:
    name: "Enhanced PR Merge Criteria"
    description: "Improved first-loop PR processing with both GitHub Actions success AND mergeable status checks"
    behavior:
      - "First loop only processes PRs that have BOTH passing GitHub Actions AND mergeable status"
      - "PRs with passing Actions but not mergeable are deferred to second loop"
      - "PRs with mergeable status but failing Actions are deferred to second loop"
      - "Only PRs meeting both criteria are processed for immediate merge"
    benefits:
      - "Reduces merge failures by checking mergeable status upfront"
      - "Prevents wasted processing time on unmergeable PRs"
      - "Improves automation reliability and success rate"
    criteria:
      - "GitHub Actions: success = true"
      - "PR mergeable: mergeable = true"
      - "Both conditions must be met for first-loop processing"

  conflict_resolution:
    name: "Automatic Model Switching for Conflicts"
    description: "Automatically switches to faster model (gemini-2.5-flash) when resolving PR merge conflicts"
    behavior:
      - "Detects merge conflicts in PRs"
      - "Switches from default model to gemini-2.5-flash for faster conflict resolution"
      - "Resolves conflicts using AI analysis"
      - "Switches back to default model after resolution"
    benefits:
      - "Faster conflict resolution with optimized model"
      - "Cost-effective processing for conflict scenarios"
      - "Maintains quality while improving speed"

  package_lock_conflict_resolution:
    name: "Specialized Package Lock Conflict Resolution"
    description: "Automatically resolves package-lock.json conflicts by regenerating dependency files"
    behavior:
      - "Detects conflicts that only affect package-lock.json, yarn.lock, or pnpm-lock.yaml"
      - "Removes conflicted dependency lock files"
      - "Runs appropriate package manager (npm install, yarn install) to regenerate lock files"
      - "Commits and pushes the resolved changes"
      - "Bypasses AI analysis for faster resolution"
    benefits:
      - "Instant resolution of common dependency conflicts"
      - "No manual intervention required"
      - "Maintains dependency integrity"
      - "Faster than AI-based conflict resolution"
    supported_files:
      - "package-lock.json"
      - "yarn.lock"
      - "pnpm-lock.yaml"

testing:
  unit_tests:
    description: "Unit tests for individual components"
    files:
      - "tests/test_github_client.py"
      - "tests/test_gemini_client.py"
      - "tests/test_automation_engine.py"
      - "tests/test_cli.py"
      - "tests/test_config.py"
    coverage: "All public methods and error conditions"

  integration_tests:
    description: "Integration tests for component interactions"
    included_in: "tests/test_automation_engine.py"
    coverage: "GitHub-Gemini integration, CLI-Engine integration"

  e2e_tests:
    description: "End-to-end tests for complete workflows"
    files:
      - "tests/test_e2e.py"
    coverage: "Complete automation workflows, CLI integration"

deployment:
  installation:
    method: "pip install"
    requirements: "Python 3.9+"
    dependencies: "Listed in pyproject.toml"

  configuration:
    environment_variables:
      required:
        - "GITHUB_TOKEN"
        - "GEMINI_API_KEY"
      optional:
        - "GITHUB_API_URL"
        - "GEMINI_MODEL"
        - "MAX_ISSUES_PER_RUN"
        - "MAX_PRS_PER_RUN"
        - "DRY_RUN"
        - "LOG_LEVEL"

  usage:
    examples:
      - command: "auto-coder process-issues --repo owner/repo"
        description: "Process issues and PRs with codex backend (default)"
      - command: "auto-coder process-issues --repo owner/repo --backend gemini --model gemini-2.5-pro"
        description: "Process issues and PRs using Gemini backend (model required for Gemini; --model is ignored when backend=codex)"
      - command: "auto-coder process-issues --repo owner/repo --jules-mode"
        description: "Process issues with jules mode (label only), PRs with AI analysis"
      - command: "auto-coder process-issues --repo owner/repo --jules-mode --dry-run"
        description: "Run jules mode in dry-run mode"
      - command: "auto-coder create-feature-issues --repo owner/repo"
        description: "Create feature enhancement issues"
